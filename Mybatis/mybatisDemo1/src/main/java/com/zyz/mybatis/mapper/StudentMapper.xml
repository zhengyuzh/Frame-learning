<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zyz.mybatis.mapper.StudentMapper">
    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>
    <!--
        在当前Mapper.xml中使用二级缓存：
             1、默认:<cache/>
             2、自定义参数 <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>
     -->

    <!--通过对象更新数据-->
    <update id="updateStudent" parameterType="Student">
        update student
        set stuNo   = #{stuNo},
            stuName = #{stuName},
            cardid  = #{cardID},
            classid = #{classID}
        where stuNo = #{stuNo}
    </update>

    <!--通过map更新数据-->
    <update id="updateStudentMap" parameterType="map">
        update student
        set stuNo   = #{stuNo},
            stuName = #{stuName},
            cardid  = #{cardid},
            classid = #{classid}
        where stuNo = #{stuNo}
    </update>

    <!--通过学号删除学生-->
    <delete id="deleteStudentById">
        delete
        from student
        where stuNo = #{stuNo}
    </delete>

    <!--查询全部-->
    <select id="queryAll" resultType="Student">
        select *
        from student
    </select>

    <!--通过学号 查询学生-->
    <select id="queryStudentById" resultType="com.zyz.mybatis.entity.Student">
        select *
        from student
        where stuNo = #{stuNo}
    </select>

    <!--模糊查询-->
    <select id="getStudentLike" resultType="com.zyz.mybatis.entity.Student">
        select * from student where stuname like "%"#{value}"%"
    </select>

    <!--新增学生-->
    <insert id="addStudent" parameterType="Student">
        insert into student (stuno, stuname, cardid, classid)
        values (#{stuNo}, #{stuName}, #{cardID}, #{classID})
    </insert>
</mapper>