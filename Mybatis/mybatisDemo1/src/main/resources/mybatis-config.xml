<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--configuration core file-->

<configuration>
    <!--
        引入外部配置文件
        这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，
        也可以在 properties 元素的子元素中设置。例如：
    -->
    <properties resource="db.properties">
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </properties>

    <!--
        这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。
        下表描述了设置中各项设置的含义、默认值等。
        logImpl	指定 MyBatis 所用日志的具体实现，未指定时将自动查找。
        SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING
    -->
    <settings>
        <setting name="logImpl" value="LOG4J"/>
    </settings>


    <!--
        1、可以给实体类起别名
             <typeAliases>
                 <typeAlias type="com.zyz.mybatis.entity.Student" alias="student" />
             </typeAliases>

       2、 批量设置别名，会自动的将该包下的所有类定义了别名，别名就是其自身且不区分大小
    -->
    <typeAliases>
        <package name="com.zyz.mybatis.entity" />
    </typeAliases>


    <!--
        MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。
        例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。
        不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境


        注意一些关键点:
                默认使用的环境 ID（比如：default="development"）。
                每个 environment 元素定义的环境 ID（比如：id="development"）。
                事务管理器的配置（比如：type="JDBC"）。
                数据源的配置（比如：type="POOLED"）。
        默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。
    -->


    <environments default="development">
        <environment id="development">
            <!--
                JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能，它依赖从数据源获得的连接来管理事务作用域。
                默认情况下，为了与某些驱动程序兼容，它在关闭连接时启用自动提交。
             -->
            <transactionManager type="JDBC"/>
            <!--
                dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源
                大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。
                POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。
                这种处理方式很流行，能使并发 Web 应用快速响应请求。
            -->
            <dataSource type="POOLED">
                <!--
                    设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:
                    这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。
                    driver 和 url 属性将会由 db.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。
                -->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
         加载映射配置文件
             既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。
             但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，
             所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。
             你可以使用相对于
                        1、类路径的资源引用
                        2、完全限定资源定位符（包括 file:/// 形式的 URL）
                        3、类名
                        4、包名：
    -->
    <!-- 1、使用相对于类路径的资源引用 -->
    <mappers>
        <mapper resource="com/zyz/mybatis/mapper/StudentMapper.xml"/>
        <mapper resource="com/zyz/mybatis/mapper/GoodsMapper.xml"/>
    </mappers>

    <!--
    2、使用完全限定资源定位符（URL）
    <mappers>
        <mapper url="file:///var/mappers/AuthorMapper.xml"/>
        <mapper url="file:///var/mappers/BlogMapper.xml"/>
        <mapper url="file:///var/mappers/PostMapper.xml"/>
    </mappers>
    -->

    <!--
    3、使用映射器接口实现类的完全限定类名
    <mappers>
        <mapper class="org.mybatis.builder.AuthorMapper"/>
        <mapper class="org.mybatis.builder.BlogMapper"/>
        <mapper class="org.mybatis.builder.PostMapper"/>
    </mappers>
    -->

    <!--
    4、将包内的映射器接口全部注册为映射器
     <mappers>
         <package name="org.mybatis.builder"/>
     </mappers>
    -->
</configuration>
